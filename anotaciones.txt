Constructores:
*Es un metodo o funcion
*Se ejecuta al momento de crear una instancia, es decir es el primer metodo en ejecutarse.
*Se utiliza usualmente para inicializar atributos internos o inicializar otros objetos.
*Obligatoriamente tiene que ser publico
*Un constructor en PHP debe tener el siguiente nombre
	public function __construct(){}

Java:
	public NombreClase(){}

En Java un constructor no tiene tipo de dato de retorno, inclusive void.
Si no se define un constructor, se crea automaticamente uno vacio.

Composici√≥n:
Es utilizar para un atributo un tipo de dato referenciado, es decir utilizar una clase previamente creada como tipo de dato, en PHP no se definen los tipos de datos de cada atributo, asi que es en el proceso de instanciacion donde se debe enviar el objeto para el atributo que tendra el tipo de dato referenciado.

Modificador static:
Permite acceder a un atributo o metodo sin crear una instancia. Esto se hace a traves del nombre de la clase.

PHP
	NombreClase::nombreAtributoEstatico;

Los atributos estaticos conservan el mismo valor para todos los objetos.
Para acceder a un atributo estatico desde la propia clase se usa self::$nombreAtributoEstatico


Pilares de la Programacion Orientada a Objetos:
Encapsulacion: Definir atributos privados y acceder a ellos mediante metodos publicos, esto se hace para proteger los atributos de modificaciones involuntarias. A los metodos para acceder o asignar valores se los conoce como los metodos set y get.

Abstraccion
Es utilizar alguna funcionalidad sin necesidad de saber como esta estructurada internamente.

Herencia
Es la funcionalidad que permite reutilizar codigo definiendo una nueva clase que encapsule atributos y metodos en comun de varias clases. A la nueva clase se le llamara clase padre, super clase o clase base, y a las clases que hereden de esta se les llamara clase hija, sub clase o clase derivada.
Generalmente los atributos de la clase padre se definen con el modificador de acceso protected, este es similar al modificar private con la salvedad de que permite que sean accedidos desde clases hijas.

-Sobreescritura de metodos: Volver a escribir un metodo en una clase hija que estaba previamente defido en su clase padre. Si se necesita llamar al metodo padre desde el metodo sobreescrito en la clase hija se debe utilizar parent::nombreMetodo()

-instanceof: operador logico que sirve para verificar si un objeto es instancia de una clase.
	Sintaxis (PHP y Java): $objeto instanceof NombreClase.

-Clases Abstractas:
	Son clases que generalmente se utilizan como clase base o clase padre en herencia, son clases genericas y se rigen por las siguientes reglas:
	-No se pueden instanciar.
	-A pesar de que no se pueden instanciar si pueden tener constructor.
	-Una clase abstracta puede tener o no metodos abstractos.
	-Si hay al menos un metodo abstracto la clase debe ser abstracta.
	-Un metodo abstracto no tiene cuerpo solo se define y este debe ser sobreescrito obligatroriamente en clases hijas.

-Interfaces(interface): Son  estructuras de datos similares a una clase, se les conoce tambien como clase abstracta pura y debe cumplir con las siguientes reglas:
	-Se utiliza la palabra reservada interface en vez de class.
	-No se puede instanciar.
	-No tiene constructor.
	-Todos sus atributos son constantes estaticas.
	-Todos los metodos son abstractos.
	-Se puede aplicar herencia teniendo como padre una o varias interfaces, para ello se debe utilizar implements cuando una clase hereda de una interfaz y extends cuando se aplique herencia entre interfaces.
	-Los atributos y metodos deben ser public.


Polimorfismo